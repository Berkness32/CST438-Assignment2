package com.cst438.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.cst438.domain.Assignment;
import com.cst438.domain.AssignmentRepository;
import com.cst438.domain.Course;
import com.cst438.domain.CourseRepository;
import com.cst438.domain.Enrollment;
import com.cst438.domain.EnrollmentRepository;
import com.cst438.domain.Grade;
import com.cst438.domain.GradeRepository;
import com.cst438.domain.Section;
import com.cst438.domain.SectionRepository;
import com.cst438.domain.User;
import com.cst438.domain.UserRepository;
import com.cst438.dto.AssignmentDTO;
import com.cst438.dto.AssignmentStudentDTO;
import com.cst438.dto.GradeDTO;
import com.cst438.dto.NewAssignmentDTO;

@RestController
@CrossOrigin(origins = "http://localhost:3000")
public class AssignmentController {

    @Autowired
    AssignmentRepository assignmentRepository;

    @Autowired
    CourseRepository courseRepository;

    @Autowired
    SectionRepository sectionRepository;

    @Autowired
    UserRepository userRepository;

    @Autowired
    EnrollmentRepository enrollmentRepository;

    @Autowired
    GradeRepository gradeRepository;


    // instructor lists assignments for a section.  Assignments ordered by due date.
    // logged in user must be the instructor for the section
    @GetMapping("/sections/{secNo}/assignments")
    public List<AssignmentDTO> getAssignments(
            @PathVariable("secNo") int secNo) {
        List<Assignment> assignments = assignmentRepository.findBySectionNoOrderByDueDate(secNo);
        List<AssignmentDTO> dto_list = new ArrayList<>();
        //Section s = SectionRepository.findById(secNo).orElse(null);

        for (Assignment a : assignments) {
            Section s = a.getSection();
            dto_list.add(new AssignmentDTO(a.getAssignmentId(), a.getTitle(), a.getDueDate(), s.getCourse().toString(), s.getSecId(), secNo));
        }

        return dto_list;
    }

    // add assignment
    // user must be instructor of the section
    // return AssignmentDTO with assignmentID generated by database
    @PostMapping("/assignments")
    public AssignmentDTO createAssignment(
            @RequestBody NewAssignmentDTO dto) {
        Course course = courseRepository.findById(dto.courseId()).orElse(null);
        if (course == null ){
            throw  new ResponseStatusException( HttpStatus.NOT_FOUND, "course not found "+dto.courseId());
        }



        Section section = sectionRepository.findBySectionNo(dto.secNo());
        if (section == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Section not found: " + dto.secNo());
        }


//        User instructor = userRepository.findByEmail(section.getInstructorEmail());
//        if (instructor == null || !instructor.getType().equals("INSTRUCTOR")) {
//            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "User is not the instructor of the section.");
//        }

        Assignment assignment = new Assignment();
        assignment.setTitle(dto.title());
        assignment.setDueDate(dto.dueDate());
        assignment.setSection(section);
        assignment.setCourse(course);

        assignment = assignmentRepository.save(assignment);

        return new AssignmentDTO(
                assignment.getAssignmentId(),
                assignment.getTitle(),
                assignment.getDueDate(),
                section.getCourse().getCourseId(),
                section.getSecId(),
                section.getSectionNo()
        );
    }


    // update assignment for a section.  Only title and dueDate may be changed.
    // user must be instructor of the section
    // return updated AssignmentDTO
    @PutMapping("/assignments")
    public AssignmentDTO updateAssignment(@RequestBody AssignmentDTO dto) {

        Assignment a = assignmentRepository.findByAssignmentId(dto.id());
        if (a==null) {
            throw  new ResponseStatusException( HttpStatus.NOT_FOUND, "assignment not found "+ dto.id());
        }

        a.setTitle(dto.title());
        a.setDueDate(dto.dueDate());

        Section section = sectionRepository.findBySectionNo(dto.secNo());
        if (section == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Section not found with sectionNo " + dto.secNo());
        }

//        User instructor = userRepository.findByEmail(section.getInstructorEmail());
//        if (instructor == null || !instructor.getType().equals("INSTRUCTOR")) {
//            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "User is not the instructor of the section.");
//        }

        a.setSection(section);

        assignmentRepository.save(a);

        return dto;
    }

    // delete assignment for a section
    // logged in user must be instructor of the section
    @DeleteMapping("/assignments/{assignmentId}")
    public void deleteAssignment(@PathVariable("assignmentId") int assignmentId) {

        Assignment assignment = assignmentRepository.findById(assignmentId).orElse(null);
        if (assignment == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Assignment not found with ID " + assignmentId);
        }

        assignmentRepository.delete(assignment);
    }

    // instructor gets grades for assignment ordered by student name
    // user must be instructor for the section
    @GetMapping("/assignments/{assignmentId}/grades")
    public List<GradeDTO> getAssignmentGrades(@PathVariable("assignmentId") int assignmentId) {

        Assignment assignment = assignmentRepository.findByAssignmentId(assignmentId);
        if (assignment == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Assignment not found with ID " + assignmentId);
        }

        Section section = assignment.getSection();
//        User instructor = userRepository.findByEmail(section.getInstructorEmail());
//        if (instructor == null || !instructor.getType().equals("INSTRUCTOR")) {
//            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "User is not the instructor of the section.");
//        }

        List<Enrollment> enrollments = enrollmentRepository.findEnrollmentsBySectionNoOrderByStudentName(section.getSectionNo());
        List<GradeDTO> gradeDTOList = new ArrayList<>();

        for (Enrollment enrollment : enrollments) {
            Grade grade = gradeRepository.findByEnrollmentIdAndAssignmentId(enrollment.getEnrollmentId(), assignmentId);
            if (grade == null) {
                grade = new Grade();
                grade.setAssignment(assignment);
                grade.setEnrollment(enrollment);
                grade.setScore(null);  // Set score to NULL
                grade = gradeRepository.save(grade);
            }
            gradeDTOList.add(new GradeDTO(
                    grade.getGradeId(),
                    enrollment.getUser().getName(),
                    enrollment.getUser().getEmail(),
                    assignment.getTitle(),
                    assignment.getCourse().getCourseId(),
                    section.getSecId(),
                    grade.getScore()
            ));
        }

        return gradeDTOList;


        // get the list of enrollments for the section related to this assignment.
        // hint: use te enrollment repository method findEnrollmentsBySectionOrderByStudentName.
        // for each enrollment, get the grade related to the assignment and enrollment
        //   hint: use the gradeRepository findByEnrollmentIdAndAssignmentId method.
        //   if the grade does not exist, create a grade entity and set the score to NULL
        //   and then save the new entity

    }

    // instructor uploads grades for assignment
    // user must be instructor for the section
    @PutMapping("/grades")
    public void updateGrades(@RequestBody List<GradeDTO> dlist) {

        if (dlist == null || dlist.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Grade list is empty or null");
        }

//        // Retrieve the assignment to verify the instructor
//        GradeDTO firstGradeDTO = dlist.get(0);
//        Section section = sectionRepository.findBySectionNo(firstGradeDTO.sectionId());
//        User instructor = userRepository.findByEmail(section.getInstructorEmail());
//        if (instructor == null || !instructor.getType().equals("INSTRUCTOR")) {
//            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "User is not the instructor of the section.");
//        }

        // For each grade in the GradeDTO list, retrieve the grade entity, update the score, and save the entity
        for (GradeDTO gradeDTO : dlist) {
            User student = userRepository.findByEmail(gradeDTO.studentEmail());
            Enrollment enrollment = enrollmentRepository.findEnrollmentBySectionNoAndStudentId(gradeDTO.sectionId(), student.getId());
            Optional<Grade> optionalGrade = gradeRepository.findById(gradeDTO.gradeId());

//            Grade grade = gradeRepository.findByEnrollmentIdAndAssignmentId(enrollment.getEnrollmentId(), gradeDTO.getAssignmentId());
            if (optionalGrade.isEmpty()) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Grade not found");
            } else {
                Grade grade = optionalGrade.get();

                grade.setScore(gradeDTO.score());
                gradeRepository.save(grade);
            }
        }

        // for each grade in the GradeDTO list, retrieve the grade entity
        // update the score and save the entity

    }



    // student lists their assignments/grades for an enrollment ordered by due date
    // student must be enrolled in the section
    @GetMapping("/assignments")
    public List<AssignmentStudentDTO> getStudentAssignments(
            @RequestParam("studentId") int studentId,
            @RequestParam("year") int year,
            @RequestParam("semester") String semester) {

        List<Enrollment> enrollments = enrollmentRepository.findEnrollmentsByStudentIdOrderByTermId(studentId);
        if (enrollments.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Student not enrolled in any sections for the given year and semester.");
        }

        List<AssignmentStudentDTO> assignmentStudentDTOs = new ArrayList<>();

        for (Enrollment enrollment : enrollments) {
            List<Assignment> assignments = assignmentRepository.findByStudentIdAndYearAndSemesterOrderByDueDate(studentId, year, semester);

            for (Assignment assignment : assignments) {
                Grade grade = gradeRepository.findByEnrollmentIdAndAssignmentId(enrollment.getEnrollmentId(), assignment.getAssignmentId());

                assignmentStudentDTOs.add(new AssignmentStudentDTO(
                        assignment.getAssignmentId(),
                        assignment.getTitle(),
                        assignment.getDueDate(),
                        assignment.getSection().getCourse().getCourseId(),
                        assignment.getSection().getSecId(),
                        grade.getScore()
                ));
            }
        }

        return assignmentStudentDTOs;

        // return a list of assignments and (if they exist) the assignment grade
        //  for all sections that the student is enrolled for the given year and semester
        //  hint: use the assignment repository method findByStudentIdAndYearAndSemesterOrderByDueDate

    }

    // New Method for finding assignment
    public AssignmentDTO getAssignmentById(int assignmentId) {
        Assignment assignment = assignmentRepository.findByAssignmentId(assignmentId);
        if (assignment == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Assignment not found with ID " + assignmentId);
        }

        Section section = assignment.getSection();

        return new AssignmentDTO(
                assignment.getAssignmentId(),
                assignment.getTitle(),
                assignment.getDueDate(),
                section.getCourse().getCourseId(),
                section.getSecId(),
                section.getSectionNo()
        );
    }
}
